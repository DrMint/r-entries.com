---
import type { CollectionEntry } from "astro:content";
import { getCollection } from "astro:content";
import LeftArrow from "src/icons/lucide--arrow-left.svg";
import RightArrow from "src/icons/lucide--arrow-right.svg";

interface Props {
  currentPost: CollectionEntry<"posts">;
}

const { currentPost } = Astro.props;

const posts = await getCollection("posts");

// Sort from newer to older
posts.sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf());

const previousPost = posts.find(
  (otherPost) =>
    otherPost.data.date.valueOf() < currentPost.data.date.valueOf(),
);

const nextPost = posts.findLast(
  (otherPost) =>
    otherPost.data.date.valueOf() > currentPost.data.date.valueOf(),
);
---

{/* --------------------------------[ HTML ]-------------------------------- */}

<div component-root>
  {
    nextPost ? (
      <a id="next" href={`/posts/${nextPost.slug}`}>
        <LeftArrow width={18} height={18} />
        <div>
          <p class="label">Next Post</p>
          <p>{nextPost.data.title}</p>
        </div>
      </a>
    ) : (
      <div id="next" class="disabled">
        <LeftArrow width={18} height={18} />
        <div>
          <p class="label">Next Post</p>
          <p>Newest post!</p>
        </div>
      </div>
    )
  }

  {
    previousPost ? (
      <a id="previous" href={`/posts/${previousPost.slug}`}>
        <div>
          <p class="label">Previous Post</p>
          <p>{previousPost.data.title}</p>
        </div>
        <RightArrow width={18} height={18} />
      </a>
    ) : (
      <div id="previous" class="disabled">
        <div>
          <p class="label">Previous Post</p>
          <p>Last post!</p>
        </div>
        <RightArrow width={18} height={18} />
      </div>
    )
  }
</div>

{/* ---------------------------------[ CSS ]-------------------------------- */}

<style>
  [component-root] {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 12px;
    width: 100%;

    & > #next,
    & > #previous {
      display: flex;
      border: 1px solid var(--foreground-20);
      border-radius: 8px;
      gap: 12px;
      padding: 16px;
      align-items: center;

      & .label {
        font-size: small;
        color: var(--foreground-60);
      }

      &.disabled {
        border-color: var(--foreground-10);
        color: var(--foreground-50);

        & .label {
          color: var(--foreground-30);
        }
      }

      transition:
        background-color 100ms,
        border-color 100ms;

      & > svg {
        transition: translate 100ms;
      }

      &:not(.disabled):hover,
      &:not(.disabled):focus-visible {
        background-color: var(--foreground-5);
        border-color: var(--foreground-50);

        & > svg {
          translate: var(--translation) 0px;
        }
      }

      & > div {
        display: flex;
        flex-direction: column;
        gap: 4px;

        & p {
          line-height: 1.2;
        }
      }
    }

    & > #previous {
      justify-content: end;
      text-align: end;
      --translation: 4px;
      padding-left: 24px;
    }

    & > #next {
      --translation: -4px;
      padding-right: 24px;
    }

    @media only screen and (max-width: 600.5px) {
      grid-template-columns: 1fr;
    }
  }
</style>
