---
import ChevronDown from "src/icons/lucide--chevron-down.svg";

interface Props {
  headings: { depth: number; slug: string; text: string }[];
}

const { headings } = Astro.props;

// Filter out h1 and create a nested structure
const toc = headings
  .filter(({ depth }) => depth > 1)
  .map((heading) => ({
    ...heading,
    // Remove the "#" prefix if it exists
    text: heading.text.startsWith("#")
      ? heading.text.slice(1).trim()
      : heading.text,
    children: [],
  }));
---

{/* --------------------------------[ HTML ]-------------------------------- */}

<details component-root>
  <summary>
    <span>Table of Contents</span>
    <ChevronDown width={20} height={20} />
  </summary>
  <ul>
    {
      toc.map((heading) => (
        <li style={`--depth: ${heading.depth - 2}`}>
          <a href={`#${heading.slug}`}>{heading.text}</a>
        </li>
      ))
    }
  </ul>
</details>

{/* ---------------------------------[ CSS ]-------------------------------- */}

<style>
  [component-root] {
    width: 100%;
    border: 1px solid var(--foreground-20);
    border-radius: 8px;

    &[open] > summary {
      border-bottom: 1px solid var(--foreground-20);
      background-color: var(--foreground-5);

      & > svg {
        transform: rotate(180deg);
      }
    }

    summary {
      border-top-left-radius: 8px;
      border-top-right-radius: 8px;
      user-select: none;
      width: 100%;
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 16px 24px;
      background: none;
      border: none;
      cursor: pointer;
      font-weight: 500;
      color: inherit;
      font-size: larger;

      & > svg {
        transition: transform 200ms ease;
      }
    }

    ul {
      list-style: none;
      padding: 0;
      margin: 0;
      display: flex;
      flex-direction: column;
      gap: 8px;
      padding: 24px;

      & li {
        padding-left: calc(var(--depth) * 16px);
        --opacity: max(calc(100% - 20% * (var(--depth))), 40%);
        color: color-mix(
          in srgb,
          var(--foreground) var(--opacity),
          transparent
        );
        font-weight: max(calc(700 - 200 * (var(--depth))), 400);

        & > a {
          text-decoration: none;

          transition: color 100ms;

          &:hover,
          &:focus-visible {
            color: var(--foreground);
          }
        }
      }
    }
  }
</style>
