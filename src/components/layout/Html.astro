---
import Footer from "src/components/layout/Footer.astro";
import GoToTop from "src/components/layout/GoToTop.astro";
import Header from "src/components/layout/Header.astro";
import MobileFooter from "src/components/layout/MobileFooter.astro";
import MobileHeader from "src/components/layout/MobileHeader.astro";
import {
  DEFAULT_DESCRIPTION,
  DEFAULT_THUMBNAIL,
  DEFAULT_TITLE,
  ENABLE_GO_TO_TOP_FEATURE,
  WEBSITE_NAME,
} from "src/constants";
import { getUrl } from "src/utils/navigation";
import { getImage } from "astro:assets";
import { generateColorThemeInline } from "src/utils/colors";

interface OpenGraph {
  title: string;
  description?: string | undefined;
  thumbnail?: ImageMetadata | undefined;
}

interface Props {
  openGraph?: OpenGraph;
}

const props = Astro.props;
const { openGraph, ...otherProps } = props;

const title = openGraph?.title ?? DEFAULT_TITLE;
const description = openGraph?.description ?? DEFAULT_DESCRIPTION;

const getThumbnail = async () => {
  if (openGraph?.thumbnail) {
    return (
      await getImage({
        src: openGraph.thumbnail,
        width: Math.min(1024, openGraph.thumbnail.width), // Making sure to not upscale the image
        format: "jpeg",
      })
    ).src;
  }
  return getUrl(DEFAULT_THUMBNAIL, true);
};

const thumbnail = await getThumbnail();
const thumbnailUrl = new URL(thumbnail, Astro.url).toString();
---

<html lang="en" style={generateColorThemeInline()}>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="generator" content={Astro.generator} />

    {/* Basic tags */}
    <title>
      {title !== DEFAULT_TITLE ? `${title} | ${DEFAULT_TITLE}` : DEFAULT_TITLE}
    </title>
    <meta name="description" content={description} />

    {/* OpenGraph tags */}
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={thumbnailUrl} />
    <meta property="og:type" content="website" />
    <meta property="og:site_name" content="R-Entries" />
    <meta property="og:url" content={Astro.url} />

    {/* Twitter tags */}
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:site" content="@DrMint4" />
    <meta name="twitter:creator" content="@DrMint4" />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content={thumbnailUrl} />

    {/* Favicon */}
    <link
      rel="icon"
      type="image/png"
      href={getUrl("/favicon-96x96.png", true)}
      sizes="96x96"
    />
    <link rel="icon" type="image/svg+xml" href={getUrl("/favicon.svg", true)} />
    <link rel="shortcut icon" href={getUrl("/favicon.ico", true)} />
    <link
      rel="apple-touch-icon"
      sizes="180x180"
      href={getUrl("/apple-touch-icon.png", true)}
    />
    <meta name="apple-mobile-web-app-title" content="R-Entries" />
    <link rel="manifest" href={getUrl("/site.webmanifest", true)} />

    {/* RSS feed */}
    <link
      rel="alternate"
      type="application/rss+xml"
      title={WEBSITE_NAME}
      href={getUrl("/rss.xml", true)}
    />

    {/* Sitemap */}
    <link rel="sitemap" href={getUrl("/sitemap-index.xml", true)} />
  </head>
  <body>
    <Header class="fine-only" />
    <MobileHeader class="coarse-only" />
    <main>
      <div {...otherProps}>
        <slot />
      </div>
      {ENABLE_GO_TO_TOP_FEATURE && <GoToTop />}
    </main>
    <Footer class="fine-only" />
    <MobileFooter class="coarse-only" />
  </body>
</html>

{/* ---------------------------------[ CSS ]-------------------------------- */}

<style>
  html {
    color-scheme: light dark;
    font-family: sans-serif;
    scroll-behavior: smooth;
  }

  html,
  body {
    padding: 0;
    margin: 0;

    color: var(--foreground);
    background-color: var(--background);
  }

  body {
    min-height: 100dvh;
    display: flex;
    flex-direction: column;
  }

  /* Fallback for browsers that don't support pointer media queries */
  .coarse-only {
    display: none;
  }

  @media (-moz-touch-enabled: 0), (pointer: fine) {
    .coarse-only {
      display: none;
    }
  }

  @media (-moz-touch-enabled: 1), (pointer: coarse) {
    .fine-only {
      display: none;
    }

    .coarse-only {
      /* Using initial isn't the best idea, considering an element with
      .fine-only could use another display value. */
      display: initial;
    }
  }

  main {
    flex: 1;
    display: flex;
    flex-direction: column;

    max-width: 1024px;
    width: 100%;
    margin-inline: auto;

    @media only screen and (min-width: 1024px) {
      border-inline: 1px solid var(--layout-border);
    }

    & > [data-component="GoToTop"] {
      align-self: flex-end;
      position: sticky;
      margin-bottom: 32px;
      transform: translateX(24px);

      bottom: 32px;

      @media (pointer: coarse) {
        bottom: calc(80px + 32px);
      }

      @media (max-width: 1096px) {
        align-self: center;
        transform: unset;
      }
    }
  }
</style>

<style is:global>
  :root {
    --foreground: var(--light-foreground);
    --background: var(--light-background);
    --foreground-3: var(--light-foreground-3);
    --foreground-5: var(--light-foreground-5);
    --foreground-10: var(--light-foreground-10);
    --foreground-20: var(--light-foreground-20);
    --foreground-30: var(--light-foreground-30);
    --foreground-50: var(--light-foreground-50);
    --foreground-60: var(--light-foreground-60);
    --foreground-70: var(--light-foreground-70);
    --foreground-80: var(--light-foreground-80);
    --foreground-90: var(--light-foreground-90);
    --background-70-transparent: var(--light-background-70-transparent);
    --foreground-5-transparent: var(--light-foreground-5-transparent);
    --foreground-20-transparent: var(--light-foreground-20-transparent);

    @media (prefers-color-scheme: dark) {
      --foreground: var(--dark-foreground);
      --background: var(--dark-background);
      --foreground-3: var(--dark-foreground-3);
      --foreground-5: var(--dark-foreground-5);
      --foreground-10: var(--dark-foreground-10);
      --foreground-20: var(--dark-foreground-20);
      --foreground-30: var(--dark-foreground-30);
      --foreground-50: var(--dark-foreground-50);
      --foreground-60: var(--dark-foreground-60);
      --foreground-70: var(--dark-foreground-70);
      --foreground-80: var(--dark-foreground-80);
      --foreground-90: var(--dark-foreground-90);
      --background-70-transparent: var(--dark-background-70-transparent);
      --foreground-5-transparent: var(--dark-foreground-5-transparent);
      --foreground-20-transparent: var(--dark-foreground-20-transparent);
    }

    --layout-border: var(--foreground-20);

    /* Padding */
    --middle-x-padding: clamp(16px, 4vw, 48px);

    /* Font size */
    --font-size-increase: (2px + min(0.5vw, 5px));
    --font-size-xs: 12px;
    --font-size-s: 14px;
    --font-size-m: 16px;
    --font-size-l: calc(16px + var(--font-size-increase) * 0.4);
    --font-size-xl: calc(16px + var(--font-size-increase) * 0.9);
    --font-size-2xl: calc(16px + var(--font-size-increase) * 1.6);
    --font-size-3xl: calc(16px + var(--font-size-increase) * 2.5);
    --font-size-4xl: calc(16px + var(--font-size-increase) * 3.5);
    --font-size-5xl: calc(16px + var(--font-size-increase) * 7.5);
  }

  a {
    color: inherit;
    text-decoration: unset;
  }

  p,
  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    margin: unset;
    line-height: 1;
  }

  h1 {
    font-size: var(--font-size-4xl);
    letter-spacing: -0.03em;
    font-stretch: 95%;
    font-weight: 900;
  }

  h2 {
    font-size: var(--font-size-3xl);
    letter-spacing: -0.025em;
    font-stretch: 95%;
    font-weight: 800;
  }

  h3 {
    font-size: var(--font-size-2xl);
    letter-spacing: -0.02em;
    font-stretch: 95%;
    font-weight: 750;
  }

  h4 {
    font-size: var(--font-size-xl);
    letter-spacing: -0.02em;
    font-stretch: 95%;
    font-weight: 700;
  }

  h5 {
    font-size: var(--font-size-l);
    letter-spacing: -0.02em;
    font-stretch: 95%;
    font-weight: 600;
  }

  h6 {
    font-size: var(--font-size-m);
    letter-spacing: -0.02em;
    font-stretch: 93%;
    font-weight: 450;
  }

  * {
    box-sizing: border-box;
  }

  *:focus-visible {
    outline: 2px solid var(--foreground) !important;
  }

  [id] {
    scroll-margin-top: calc(56px + 2em);
  }

  /* Rehype nodes */

  .footnotes[data-rehype-non-mdx] {
    margin-top: calc(var(--font-size-3xl) * 2);
  }

  *[data-rehype-non-mdx] {
    line-height: 1.6;
  }

  a[data-rehype-non-mdx] {
    color: revert;
    text-decoration: revert;
  }

  *:first-child[data-rehype-non-mdx] {
    margin-top: unset;
  }

  *:last-child[data-rehype-non-mdx] {
    margin-bottom: unset;
  }

  h2[data-rehype-non-mdx],
  h3[data-rehype-non-mdx],
  h4[data-rehype-non-mdx],
  h5[data-rehype-non-mdx],
  h6[data-rehype-non-mdx] {
    margin-top: 2em;
    margin-bottom: 1em;
    line-height: 1;

    & > .anchor-link {
      color: var(--foreground-60);
      font-size: 90%;
      text-decoration: unset;
      margin-right: 0.4em;
      transition: color 100ms;

      &:hover,
      &:focus-visible {
        color: var(--foreground);
      }
    }
  }

  h2 + h3[data-rehype-non-mdx],
  h3 + h4[data-rehype-non-mdx],
  h4 + h5[data-rehype-non-mdx],
  h5 + h6[data-rehype-non-mdx] {
    margin-top: -1em;
  }

  p[data-rehype-non-mdx] {
    margin-top: 1em;
    margin-bottom: 1em;
  }

  ul[data-rehype-non-mdx],
  ol[data-rehype-non-mdx] {
    margin-block: 0.75em;

    & > li + li {
      margin-top: 1em;
    }

    ::marker {
      color: var(--foreground-50);
    }
  }

  ul > li[data-rehype-non-mdx] {
    padding-left: 3px;
  }

  ol > li[data-rehype-non-mdx] {
    padding-left: 8px;
  }

  img[data-rehype-non-mdx] {
    width: 100%;
    height: auto;
    border: 1px solid var(--layout-border);

    background-image: radial-gradient(
      var(--layout-border) 20%,
      transparent 30%
    );
    background-size: 12px 12px;
    background-repeat: space;
  }

  table[data-rehype-non-mdx] {
    width: 100%;
    overflow: hidden;
    outline: 1px solid var(--foreground-20);
    border-collapse: collapse;

    th,
    td {
      padding: 0.5em 1em;
      border: 1px solid var(--foreground-10);
    }

    th {
      background-color: var(--foreground-5);
    }
  }

  blockquote[data-rehype-non-mdx] {
    margin-inline: unset;
    background-color: var(--foreground-5-transparent);
    border: 1px solid var(--foreground-5-transparent);
    border-left-width: 4px;
    border-radius: 8px;
    padding: 1em 1.5em;
  }

  p > code[data-rehype-non-mdx],
  li > code,
  [data-rehype-pretty-code-figure] > code {
    background-color: var(--foreground-10);
    padding: 0.2em 0.5em;
    border-radius: 8px;
  }

  kbd[data-rehype-non-mdx] {
    background-color: var(--foreground-10);
    padding: 0.2em 0.5em;
    border-radius: 8px;
    border-bottom: 1px solid var(--foreground-30);
  }

  mark[data-rehype-non-mdx] {
    padding: 0.1em 0.4em;
  }

  abbr[data-rehype-non-mdx] {
    text-decoration-color: var(--foreground-60);
    text-underline-offset: 0.3em;
  }

  [data-rehype-image-figures][data-rehype-non-mdx] {
    margin-inline: 0;
    margin-bottom: 2em;

    & > figcaption {
      margin-top: 0.5em;
      color: var(--foreground-60);
      text-align: center;
    }
  }

  /* Normal code blocks */
  pre[data-rehype-non-mdx] > code:not([data-theme]) {
    display: block;
    background-color: var(--foreground-5-transparent);
    border: 1px solid var(--foreground-5-transparent);
    border-left-width: 4px;
    border-radius: 8px;
    overflow-x: auto;
    padding: 1rem;
  }

  /* Code blocks from rehype-pretty-code */
  [data-rehype-pretty-code-figure][data-rehype-non-mdx] {
    margin-inline: unset;

    & > [data-rehype-pretty-code-caption] {
      color: var(--foreground-60);
      text-align: center;
      font-size: var(--font-size-s);
      margin-bottom: 3em;
    }

    & code[data-theme] * {
      color: light-dark(var(--shiki-light), var(--shiki-dark));
      background-color: light-dark(var(--shiki-light-bg), var(--shiki-dark-bg));
    }

    & > pre {
      background-color: var(--foreground-5-transparent);
      border: 1px solid var(--foreground-5-transparent);
      border-left-width: 4px;
      border-radius: 8px;
      overflow-x: auto;
      padding: 1rem 0;

      & [data-line] {
        padding: 0 1rem;
      }

      & [data-highlighted-line] {
        background-color: var(--foreground-5-transparent);

        &[data-highlighted-line-id="del"] {
          background-color: color-mix(
            in srgb,
            rgb(255, 55, 29) 15%,
            transparent
          );
        }

        &[data-highlighted-line-id="ins"] {
          background-color: color-mix(
            in srgb,
            rgb(110, 255, 52) 10%,
            transparent
          );
        }
      }

      & [data-highlighted-chars] {
        background-color: var(--foreground-10);
        padding: 0.2em 0.5em;
        border-radius: 6px;
        border-bottom: 1px solid var(--foreground-20-transparent);

        &[data-chars-id] > span {
          color: var(--foreground-60);
          mix-blend-mode: plus-lighter;
        }

        &[data-chars-id="del"] {
          background-color: color-mix(
            in srgb,
            rgb(255, 55, 29) 20%,
            transparent
          );

          & > span {
            text-decoration: line-through;
          }
        }

        &[data-chars-id="ins"] {
          background-color: color-mix(
            in srgb,
            rgb(110, 255, 52) 20%,
            transparent
          );
        }
      }
    }

    & > [data-rehype-pretty-code-title] {
      border: 1px solid var(--foreground-5-transparent);
      border-left-width: 4px;
      border-top-left-radius: 8px;
      border-top-right-radius: 8px;
      border-bottom: unset;
      padding: 0.5em 1em;
      font-family: monospace;
    }

    & > [data-rehype-pretty-code-title] + pre {
      border-top-left-radius: unset;
      border-top-right-radius: unset;
      border-top: unset;
      margin-top: unset;
    }

    [data-line-numbers] {
      counter-reset: line;

      & > [data-line]::before {
        counter-increment: line;
        content: counter(line);

        /* Other styling */
        display: inline-block;
        margin-right: 2rem;
        text-align: right;
        color: var(--foreground-30);
      }

      & > [data-highlighted-line]::before {
        mix-blend-mode: plus-lighter;
      }

      &[data-line-numbers-max-digits="1"] > [data-line]::before {
        width: 1ch;
      }

      &[data-line-numbers-max-digits="2"] > [data-line]::before {
        width: 2ch;
      }

      &[data-line-numbers-max-digits="3"] > [data-line]::before {
        width: 3ch;
      }

      &[data-line-numbers-max-digits="4"] > [data-line]::before {
        width: 4ch;
      }
    }
  }

  /* Callouts */

  .callout[data-rehype-non-mdx] {
    border: 1px solid;

    /* Monochrome fallback for browsers that don't support color-mix */
    background-color: var(--foreground-5);
    border-color: var(--foreground-20);

    /* TODO: Add more colorful fallback for browsers that don't support color-mix */
    background-color: light-dark(
      color-mix(in srgb, var(--rc-color) 20%, var(--background)),
      color-mix(in srgb, var(--rc-color) 10%, var(--background))
    );

    border-color: light-dark(
      color-mix(in srgb, var(--rc-color) 50%, var(--background)),
      color-mix(in srgb, var(--rc-color) 30%, var(--background))
    );
    border-left-width: 4px;
    border-radius: 8px;
    padding: 1em 1.5em;
    overflow: hidden;
    margin-block: 1em;

    & > .callout-title {
      display: flex;
      align-items: center;
      gap: 4px;

      /* Monochrome fallback for browsers that don't support color-mix */
      color: var(--foreground-70);

      /* TODO: Add more colorful fallback for browsers that don't support color-mix */
      color: color-mix(in srgb, var(--rc-color) 50%, var(--foreground));
      font-size: inherit;

      & > .callout-title-icon {
        display: flex;
        flex: 0 0 auto;
        align-items: center;
        margin-right: 0.3em;

        & > svg {
          width: 18px;
          height: 18px;
        }
      }

      & > .callout-title-text {
        color: inherit;
        font-weight: 600;
      }
    }

    & > .callout-content {
      overflow-x: auto;
      padding: 0;
      background-color: transparent;
    }

    &[data-callout="note"] {
      --rc-color: rgb(8, 109, 221);
    }

    &[data-callout="abstract"] {
      --rc-color: rgb(0, 191, 188);
    }

    &[data-callout="summary"] {
      --rc-color: rgb(0, 191, 188);
    }

    &[data-callout="tldr"] {
      --rc-color: rgb(0, 191, 188);
    }

    &[data-callout="info"] {
      --rc-color: rgb(8, 109, 221);
    }

    &[data-callout="todo"] {
      --rc-color: rgb(8, 109, 221);
    }

    &[data-callout="tip"] {
      --rc-color: rgb(0, 191, 188);
    }

    &[data-callout="hint"] {
      --rc-color: rgb(0, 191, 188);
    }

    &[data-callout="important"] {
      --rc-color: rgb(0, 191, 188);
    }

    &[data-callout="success"] {
      --rc-color: rgb(8, 185, 78);
    }

    &[data-callout="check"] {
      --rc-color: rgb(8, 185, 78);
    }

    &[data-callout="done"] {
      --rc-color: rgb(8, 185, 78);
    }

    &[data-callout="question"] {
      --rc-color: rgb(236, 117, 0);
    }

    &[data-callout="help"] {
      --rc-color: rgb(236, 117, 0);
    }

    &[data-callout="faq"] {
      --rc-color: rgb(236, 117, 0);
    }

    &[data-callout="warning"] {
      --rc-color: rgb(236, 117, 0);
    }

    &[data-callout="attention"] {
      --rc-color: rgb(236, 117, 0);
    }

    &[data-callout="caution"] {
      --rc-color: rgb(236, 117, 0);
    }

    &[data-callout="failure"] {
      --rc-color: rgb(233, 49, 71);
    }

    &[data-callout="missing"] {
      --rc-color: rgb(233, 49, 71);
    }

    &[data-callout="fail"] {
      --rc-color: rgb(233, 49, 71);
    }

    &[data-callout="danger"] {
      --rc-color: rgb(233, 49, 71);
    }

    &[data-callout="error"] {
      --rc-color: rgb(233, 49, 71);
    }

    &[data-callout="bug"] {
      --rc-color: rgb(233, 49, 71);
    }

    &[data-callout="example"] {
      --rc-color: rgb(120, 82, 238);
    }

    &[data-callout="quote"] {
      --rc-color: rgb(158, 158, 158);
    }

    &[data-callout="cite"] {
      --rc-color: rgb(158, 158, 158);
    }

    &details {
      & > .callout-title {
        cursor: pointer;
        padding: 1em 1.5em;
        margin: -1em -1.5em;

        & > .callout-fold-icon {
          display: flex;
          align-items: center;
          padding-inline-end: 8px;
          margin-left: auto;

          & > svg {
            transition: transform 200ms ease;
            height: 20px;
            width: 20px;
          }
        }
      }

      &[open] > .callout-title .callout-fold-icon svg {
        transform: rotate(180deg);
      }
    }
  }
</style>
