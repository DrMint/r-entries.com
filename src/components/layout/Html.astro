---
import Footer from "src/components/layout/Footer.astro";
import GoToTop from "src/components/layout/GoToTop.astro";
import Header from "src/components/layout/Header.astro";
import JSGuard from "src/components/JSGuard.astro";
import MobileFooter from "src/components/layout/MobileFooter.astro";
import MobileHeader from "src/components/layout/MobileHeader.astro";
import {
  BACKGROUND_COLOR,
  DEFAULT_DESCRIPTION,
  DEFAULT_THUMBNAIL,
  DEFAULT_TITLE,
  ENABLE_GO_TO_TOP_FEATURE,
  FOREGROUND_COLOR,
} from "src/constants";
import { getUrl } from "src/utils/navigation";
import { getImage } from "astro:assets";

interface OpenGraph {
  title: string;
  description?: string | undefined;
  thumbnail?: ImageMetadata | undefined;
}

interface Props {
  openGraph?: OpenGraph;
}

const props = Astro.props;
const { openGraph } = props;

const title = openGraph?.title ?? DEFAULT_TITLE;
const description = openGraph?.description ?? DEFAULT_DESCRIPTION;

const getThumbnail = async () => {
  if (openGraph?.thumbnail) {
    return (
      await getImage({ src: openGraph.thumbnail, width: 1024, format: "jpeg" })
    ).src;
  }
  return getUrl(DEFAULT_THUMBNAIL, true);
};

const thumbnail = await getThumbnail();
const thumbnailUrl = new URL(thumbnail, Astro.url).toString();
---

<html lang="en" class="no-js">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />

    <link rel="sitemap" href={getUrl("/sitemap-index.xml", true)} />
    <meta name="generator" content={Astro.generator} />

    {/* Basic tags */}
    <title>
      {title !== DEFAULT_TITLE ? `${title} | ${DEFAULT_TITLE}` : DEFAULT_TITLE}
    </title>
    <meta name="description" content={description} />

    {/* OpenGraph tags */}
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={thumbnailUrl} />
    <meta property="og:type" content="website" />
    <meta property="og:site_name" content="R-Entries" />
    <meta property="og:url" content={Astro.url} />

    {/* Twitter tags */}
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:site" content="@DrMint4" />
    <meta name="twitter:creator" content="@DrMint4" />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content={thumbnailUrl} />

    {/* Favicon */}
    <link
      rel="icon"
      type="image/png"
      href={getUrl("/favicon-96x96.png", true)}
      sizes="96x96"
    />
    <link rel="icon" type="image/svg+xml" href={getUrl("/favicon.svg", true)} />
    <link rel="shortcut icon" href={getUrl("/favicon.ico", true)} />
    <link
      rel="apple-touch-icon"
      sizes="180x180"
      href={getUrl("/apple-touch-icon.png", true)}
    />
    <meta name="apple-mobile-web-app-title" content="R-Entries" />
    <link rel="manifest" href={getUrl("/site.webmanifest", true)} />
  </head>
  <body>
    <Header class="fine-only" />
    <MobileHeader class="coarse-only" />
    <main>
      <div {...props}>
        <slot />
      </div>
      {
        ENABLE_GO_TO_TOP_FEATURE && (
          <JSGuard class="go-to-top-guard">
            <GoToTop />
          </JSGuard>
        )
      }
    </main>
    <Footer class="fine-only" />
    <MobileFooter class="coarse-only" />
  </body>
</html>

{/* ---------------------------------[ JS ]--------------------------------- */}

<script>
  // Enable JavaScript detection
  document.documentElement.classList.remove("no-js");
  document.documentElement.classList.add("js");
</script>

<script>
  /* 
    Medium-like image zoom on post images.
    Only enabled when the window is larger than 720px. 
  */

  import mediumZoom from "medium-zoom";
  import { ENABLE_IMAGE_ZOOM_FEATURE } from "src/constants";

  if (ENABLE_IMAGE_ZOOM_FEATURE) {
    const zoom = mediumZoom(undefined, {
      margin: 50,
      background: "var(--background-70)",
    });

    const updateZoom = (smallerThan720: boolean) => {
      if (smallerThan720) {
        zoom.detach();
      } else {
        zoom.attach(".prose img");
      }
    };

    const mediaQuery = window.matchMedia("(max-width: 720px)");
    updateZoom(mediaQuery.matches);
    mediaQuery.addEventListener("change", ({ matches }) => updateZoom(matches));
  }
</script>

{/* ---------------------------------[ CSS ]-------------------------------- */}

<style>
  html {
    color-scheme: light dark;
    font-family: sans-serif;
    scroll-behavior: smooth;
  }

  html,
  body {
    padding: 0;
    margin: 0;

    color: var(--foreground);
    background-color: var(--background);
  }

  body {
    min-height: 100dvh;
    display: flex;
    flex-direction: column;

    @media (pointer: fine) {
      .coarse-only {
        display: none;
      }
    }

    @media (pointer: coarse) {
      .fine-only {
        display: none;
      }
    }
  }

  main {
    flex: 1;
    display: flex;
    flex-direction: column;

    max-width: 1024px;
    width: 100%;
    margin-inline: auto;

    @media only screen and (min-width: 1024px) {
      border-inline: 1px solid var(--layout-border);
    }

    & > .go-to-top-guard {
      align-self: flex-end;
      position: sticky;
      margin-bottom: 32px;
      transform: translateX(24px);

      bottom: 32px;

      @media (pointer: coarse) {
        bottom: 110px;
      }

      @media (max-width: 1096px) {
        align-self: center;
        transform: unset;
      }
    }
  }
</style>

<style
  is:global
  define:vars={{
    foreground: FOREGROUND_COLOR,
    background: BACKGROUND_COLOR,
  }}
>
  :root {
    --foreground-3: color-mix(in srgb, var(--foreground) 3%, var(--background));
    --foreground-5: color-mix(in srgb, var(--foreground) 5%, var(--background));
    --foreground-10: color-mix(
      in srgb,
      var(--foreground) 10%,
      var(--background)
    );
    --foreground-20: color-mix(
      in srgb,
      var(--foreground) 20%,
      var(--background)
    );
    --foreground-30: color-mix(
      in srgb,
      var(--foreground) 30%,
      var(--background)
    );
    --foreground-50: color-mix(
      in srgb,
      var(--foreground) 50%,
      var(--background)
    );
    --foreground-60: color-mix(
      in srgb,
      var(--foreground) 60%,
      var(--background)
    );
    --background-70: color-mix(in srgb, var(--background) 70%, transparent);
    --layout-border: var(--foreground-20);
    --middle-x-padding: clamp(16px, 4vw, 48px);
  }

  .medium-zoom-overlay {
    backdrop-filter: blur(8px);
  }

  a {
    color: inherit;
    text-decoration: unset;
  }

  p,
  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    margin: unset;
    line-height: 1;
  }

  * {
    box-sizing: border-box;
  }

  .prose {
    * {
      line-height: 1.5;
    }

    a {
      color: revert;
      text-decoration: revert;
    }

    & > *:first-child {
      margin-top: unset;
    }

    & > *:last-child {
      margin-bottom: unset;
    }

    h2,
    h3,
    h4,
    h5,
    h6 {
      margin-top: 2em;
      margin-bottom: 1em;
      scroll-margin-top: calc(56px + 2em);
    }

    h2 + h3,
    h3 + h4,
    h4 + h5,
    h5 + h6 {
      margin-top: -1em;
    }

    p {
      margin-top: 1em;
      margin-bottom: 1em;
    }

    ul,
    ol {
      margin-block: 0.75em;

      li + li {
        margin-top: 1em;
      }

      ::marker {
        color: var(--foreground-50);
      }
    }

    ul > li {
      padding-left: 3px;
    }

    ol > li {
      padding-left: 8px;
    }

    img {
      width: 100%;
      height: auto;

      border: 1px solid var(--layout-border);

      background-image: radial-gradient(
        var(--layout-border) 20%,
        transparent 30%
      );
      background-size: 12px 12px;
      background-repeat: space;
    }

    img + img {
      margin-top: 1em;
    }

    blockquote {
      border-left: 4px solid var(--foreground-30);
      margin-left: unset;
      padding: 0.5em 1em;
      background-color: var(--foreground-5);
      border-radius: 8px;
    }

    .astro-code {
      padding: 1em 1.5em;
      border-radius: 8px;
      white-space: unset;
      width: 100%;
    }

    :not(.astro-code) > code {
      background-color: var(--foreground-10);
      padding: 0.2em 0.5em;
      border-radius: 8px;
    }

    .anchor-link {
      color: var(--foreground-60);
      font-size: 0.9em;
      text-decoration: unset;
      margin-right: 0.4em;
      transition: color 100ms;

      &:hover,
      &:focus-visible {
        color: var(--foreground);
      }
    }
  }
</style>
