---
import Footer from "src/components/layout/Footer.astro";
import GoToTop from "src/components/layout/GoToTop.astro";
import Header from "src/components/layout/Header.astro";
import MobileFooter from "src/components/layout/MobileFooter.astro";
import MobileHeader from "src/components/layout/MobileHeader.astro";
import {
  BACKGROUND_COLOR,
  DEFAULT_DESCRIPTION,
  DEFAULT_THUMBNAIL,
  DEFAULT_TITLE,
  ENABLE_GO_TO_TOP_FEATURE,
  FOREGROUND_COLOR,
  WEBSITE_NAME,
} from "src/constants";
import { getUrl } from "src/utils/navigation";
import { getImage } from "astro:assets";

interface OpenGraph {
  title: string;
  description?: string | undefined;
  thumbnail?: ImageMetadata | undefined;
}

interface Props {
  openGraph?: OpenGraph;
}

const props = Astro.props;
const { openGraph } = props;

const title = openGraph?.title ?? DEFAULT_TITLE;
const description = openGraph?.description ?? DEFAULT_DESCRIPTION;

const getThumbnail = async () => {
  if (openGraph?.thumbnail) {
    return (
      await getImage({ src: openGraph.thumbnail, width: 1024, format: "jpeg" })
    ).src;
  }
  return getUrl(DEFAULT_THUMBNAIL, true);
};

const thumbnail = await getThumbnail();
const thumbnailUrl = new URL(thumbnail, Astro.url).toString();
---

<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="generator" content={Astro.generator} />

    {/* Basic tags */}
    <title>
      {title !== DEFAULT_TITLE ? `${title} | ${DEFAULT_TITLE}` : DEFAULT_TITLE}
    </title>
    <meta name="description" content={description} />

    {/* OpenGraph tags */}
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={thumbnailUrl} />
    <meta property="og:type" content="website" />
    <meta property="og:site_name" content="R-Entries" />
    <meta property="og:url" content={Astro.url} />

    {/* Twitter tags */}
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:site" content="@DrMint4" />
    <meta name="twitter:creator" content="@DrMint4" />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content={thumbnailUrl} />

    {/* Favicon */}
    <link
      rel="icon"
      type="image/png"
      href={getUrl("/favicon-96x96.png", true)}
      sizes="96x96"
    />
    <link rel="icon" type="image/svg+xml" href={getUrl("/favicon.svg", true)} />
    <link rel="shortcut icon" href={getUrl("/favicon.ico", true)} />
    <link
      rel="apple-touch-icon"
      sizes="180x180"
      href={getUrl("/apple-touch-icon.png", true)}
    />
    <meta name="apple-mobile-web-app-title" content="R-Entries" />
    <link rel="manifest" href={getUrl("/site.webmanifest", true)} />

    {/* RSS feed */}
    <link
      rel="alternate"
      type="application/rss+xml"
      title={WEBSITE_NAME}
      href={getUrl("/rss.xml", true)}
    />

    {/* Sitemap */}
    <link rel="sitemap" href={getUrl("/sitemap-index.xml", true)} />
  </head>
  <body>
    <Header class="fine-only" />
    <MobileHeader class="coarse-only" />
    <main>
      <div {...props}>
        <slot />
      </div>
      {ENABLE_GO_TO_TOP_FEATURE && <GoToTop />}
    </main>
    <Footer class="fine-only" />
    <MobileFooter class="coarse-only" />
  </body>
</html>

{/* ---------------------------------[ JS ]--------------------------------- */}

<script>
  /*
    Medium-like image zoom on post images.
    Only enabled when the window is larger than 720px. 
  */

  import mediumZoom from "medium-zoom";
  import { ENABLE_IMAGE_ZOOM_FEATURE } from "src/constants";

  const initMediumZoom = () => {
    console.log("[MediumZoom] Starting");
    const proses = document.querySelectorAll(".prose");
    const images: HTMLImageElement[] = [];
    proses.forEach((prose) => {
      prose
        .querySelectorAll<HTMLImageElement>(":not(a) > img")
        .forEach((image) => {
          images.push(image);
        });
    });

    console.log("[MediumZoom] Found", images.length, "images");

    const zoom = mediumZoom(undefined, {
      margin: 50,
      background: "var(--background-70)",
    });

    const updateZoom = (smallerThan720: boolean) => {
      if (smallerThan720) {
        console.log(
          "[MediumZoom] Viewport is lesser than 720px width: disabling zoom"
        );
        zoom.detach();
      } else {
        console.log(
          "[MediumZoom] Viewport is greater than 720px width: enabled zoom"
        );
        zoom.attach(images);
      }
    };

    const mediaQuery = window.matchMedia("(max-width: 720px)");
    updateZoom(mediaQuery.matches);
    mediaQuery.addEventListener("change", ({ matches }) => updateZoom(matches));
  };

  if (ENABLE_IMAGE_ZOOM_FEATURE) {
    initMediumZoom();
  }
</script>

{/* ---------------------------------[ CSS ]-------------------------------- */}

<style>
  html {
    color-scheme: light dark;
    font-family: sans-serif;
    scroll-behavior: smooth;
  }

  html,
  body {
    padding: 0;
    margin: 0;

    color: var(--foreground);
    background-color: var(--background);
  }

  body {
    min-height: 100dvh;
    display: flex;
    flex-direction: column;

    @media (pointer: fine) {
      .coarse-only {
        display: none;
      }
    }

    @media (pointer: coarse) {
      .fine-only {
        display: none;
      }
    }
  }

  main {
    flex: 1;
    display: flex;
    flex-direction: column;

    max-width: 1024px;
    width: 100%;
    margin-inline: auto;

    @media only screen and (min-width: 1024px) {
      border-inline: 1px solid var(--layout-border);
    }

    & > [data-component="GoToTop"] {
      align-self: flex-end;
      position: sticky;
      margin-bottom: 32px;
      transform: translateX(24px);

      bottom: 32px;

      @media (pointer: coarse) {
        bottom: 110px;
      }

      @media (max-width: 1096px) {
        align-self: center;
        transform: unset;
      }
    }
  }
</style>

<style
  is:global
  define:vars={{
    foreground: FOREGROUND_COLOR,
    background: BACKGROUND_COLOR,
  }}
>
  :root {
    /* Colors */
    --foreground-3: color-mix(in srgb, var(--foreground) 3%, var(--background));
    --foreground-5: color-mix(in srgb, var(--foreground) 5%, var(--background));
    --foreground-10: color-mix(
      in srgb,
      var(--foreground) 10%,
      var(--background)
    );
    --foreground-20: color-mix(
      in srgb,
      var(--foreground) 20%,
      var(--background)
    );
    --foreground-30: color-mix(
      in srgb,
      var(--foreground) 30%,
      var(--background)
    );
    --foreground-50: color-mix(
      in srgb,
      var(--foreground) 50%,
      var(--background)
    );
    --foreground-60: color-mix(
      in srgb,
      var(--foreground) 60%,
      var(--background)
    );
    --background-70: color-mix(in srgb, var(--background) 70%, transparent);
    --layout-border: var(--foreground-20);
    --foreground-5-transparent: color-mix(
      in srgb,
      var(--foreground) 5%,
      transparent
    );

    /* Padding */
    --middle-x-padding: clamp(16px, 4vw, 48px);

    /* Font size */
    --font-size-increase: (2px + min(0.5vw, 5px));
    --font-size-xs: 12px;
    --font-size-s: 14px;
    --font-size-m: 16px;
    --font-size-l: calc(16px + var(--font-size-increase) * 0.4);
    --font-size-xl: calc(16px + var(--font-size-increase) * 0.9);
    --font-size-2xl: calc(16px + var(--font-size-increase) * 1.6);
    --font-size-3xl: calc(16px + var(--font-size-increase) * 2.5);
    --font-size-4xl: calc(16px + var(--font-size-increase) * 3.5);
    --font-size-5xl: calc(16px + var(--font-size-increase) * 7.5);
  }

  .medium-zoom-overlay {
    backdrop-filter: blur(8px);
  }

  a {
    color: inherit;
    text-decoration: unset;
  }

  p,
  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    margin: unset;
    line-height: 1;
  }

  h1 {
    font-size: var(--font-size-4xl);
    letter-spacing: -0.03em;
    font-stretch: 95%;
    font-weight: 900;
  }

  h2 {
    font-size: var(--font-size-3xl);
    letter-spacing: -0.025em;
    font-stretch: 95%;
    font-weight: 800;
  }

  h3 {
    font-size: var(--font-size-2xl);
    letter-spacing: -0.02em;
    font-stretch: 95%;
    font-weight: 750;
  }

  h4 {
    font-size: var(--font-size-xl);
    letter-spacing: -0.02em;
    font-stretch: 95%;
    font-weight: 700;
  }

  h5 {
    font-size: var(--font-size-l);
    letter-spacing: -0.02em;
    font-stretch: 95%;
    font-weight: 600;
  }

  h6 {
    font-size: var(--font-size-m);
    letter-spacing: -0.02em;
    font-stretch: 93%;
    font-weight: 450;
  }

  * {
    box-sizing: border-box;
  }

  .prose {
    * {
      line-height: 1.6;
    }

    a {
      color: revert;
      text-decoration: revert;
    }

    *:first-child {
      margin-top: unset;
    }

    *:last-child {
      margin-bottom: unset;
    }

    h2,
    h3,
    h4,
    h5,
    h6 {
      margin-top: 2em;
      margin-bottom: 1em;
      scroll-margin-top: calc(56px + 2em);
      line-height: 1;
    }

    h2 + h3,
    h3 + h4,
    h4 + h5,
    h5 + h6 {
      margin-top: -1em;
    }

    p {
      margin-top: 1em;
      margin-bottom: 1em;
    }

    ul,
    ol {
      margin-block: 0.75em;

      li + li {
        margin-top: 1em;
      }

      ::marker {
        color: var(--foreground-50);
      }
    }

    ul > li {
      padding-left: 3px;
    }

    ol > li {
      padding-left: 8px;
    }

    img {
      width: 100%;
      height: auto;

      border: 1px solid var(--layout-border);

      background-image: radial-gradient(
        var(--layout-border) 20%,
        transparent 30%
      );
      background-size: 12px 12px;
      background-repeat: space;
    }

    img + img {
      margin-top: 1em;
    }

    table {
      width: 100%;
      overflow: hidden;
      outline: 1px solid var(--foreground-20);
      border-collapse: collapse;

      th,
      td {
        padding: 0.5em 1em;
        border: 1px solid var(--foreground-10);
      }

      th {
        background-color: var(--foreground-5);
      }
    }

    blockquote {
      margin-left: unset;
      background-color: var(--foreground-5-transparent);
    }

    blockquote,
    .astro-code {
      border: 1px solid var(--foreground-5-transparent);
      border-left-width: 4px;
      border-radius: 8px;
      padding: 1em 1.5em;
    }

    p > code {
      background-color: var(--foreground-10);
      padding: 0.2em 0.5em;
      border-radius: 8px;
    }

    .anchor-link {
      color: var(--foreground-60);
      font-size: 90%;
      text-decoration: unset;
      margin-right: 0.4em;
      transition: color 100ms;

      &:hover,
      &:focus-visible {
        color: var(--foreground);
      }
    }

    kbd {
      background-color: var(--foreground-10);
      padding: 0.2em 0.5em;
      border-radius: 8px;
      border-bottom: 1px solid var(--foreground-30);
    }

    mark {
      padding: 0.1em 0.4em;
    }

    abbr {
      text-decoration-color: var(--foreground-60);
      text-underline-offset: 0.3em;
    }

    figure {
      margin-inline: 0;
      margin-bottom: 2em;

      & > figcaption {
        margin-top: 0.5em;
        color: var(--foreground-60);
        text-align: center;
      }
    }

    /* Callouts */

    .callout {
      background-color: light-dark(
        color-mix(in srgb, var(--rc-color) 20%, var(--background)),
        color-mix(in srgb, var(--rc-color) 10%, var(--background))
      );
      border: 1px solid;
      border-color: light-dark(
        color-mix(in srgb, var(--rc-color) 50%, var(--background)),
        color-mix(in srgb, var(--rc-color) 30%, var(--background))
      );
      border-left-width: 4px;
      border-radius: 8px;
      padding: 1em 1.5em;
      overflow: hidden;
      margin-block: 1em;

      & > .callout-title {
        display: flex;
        align-items: center;
        gap: 4px;

        color: color-mix(in srgb, var(--rc-color) 50%, var(--foreground));
        font-size: inherit;

        & > .callout-title-icon {
          display: flex;
          flex: 0 0 auto;
          align-items: center;
          margin-right: 0.3em;

          & > svg {
            width: 18px;
            height: 18px;
          }
        }

        & > .callout-title-text {
          color: inherit;
          font-weight: 600;
        }
      }

      & > .callout-content {
        overflow-x: auto;
        padding: 0;
        background-color: transparent;
      }

      &[data-callout="note"] {
        --rc-color: rgb(8, 109, 221);
      }

      &[data-callout="abstract"] {
        --rc-color: rgb(0, 191, 188);
      }

      &[data-callout="summary"] {
        --rc-color: rgb(0, 191, 188);
      }

      &[data-callout="tldr"] {
        --rc-color: rgb(0, 191, 188);
      }

      &[data-callout="info"] {
        --rc-color: rgb(8, 109, 221);
      }

      &[data-callout="todo"] {
        --rc-color: rgb(8, 109, 221);
      }

      &[data-callout="tip"] {
        --rc-color: rgb(0, 191, 188);
      }

      &[data-callout="hint"] {
        --rc-color: rgb(0, 191, 188);
      }

      &[data-callout="important"] {
        --rc-color: rgb(0, 191, 188);
      }

      &[data-callout="success"] {
        --rc-color: rgb(8, 185, 78);
      }

      &[data-callout="check"] {
        --rc-color: rgb(8, 185, 78);
      }

      &[data-callout="done"] {
        --rc-color: rgb(8, 185, 78);
      }

      &[data-callout="question"] {
        --rc-color: rgb(236, 117, 0);
      }

      &[data-callout="help"] {
        --rc-color: rgb(236, 117, 0);
      }

      &[data-callout="faq"] {
        --rc-color: rgb(236, 117, 0);
      }

      &[data-callout="warning"] {
        --rc-color: rgb(236, 117, 0);
      }

      &[data-callout="attention"] {
        --rc-color: rgb(236, 117, 0);
      }

      &[data-callout="caution"] {
        --rc-color: rgb(236, 117, 0);
      }

      &[data-callout="failure"] {
        --rc-color: rgb(233, 49, 71);
      }

      &[data-callout="missing"] {
        --rc-color: rgb(233, 49, 71);
      }

      &[data-callout="fail"] {
        --rc-color: rgb(233, 49, 71);
      }

      &[data-callout="danger"] {
        --rc-color: rgb(233, 49, 71);
      }

      &[data-callout="error"] {
        --rc-color: rgb(233, 49, 71);
      }

      &[data-callout="bug"] {
        --rc-color: rgb(233, 49, 71);
      }

      &[data-callout="example"] {
        --rc-color: rgb(120, 82, 238);
      }

      &[data-callout="quote"] {
        --rc-color: rgb(158, 158, 158);
      }

      &[data-callout="cite"] {
        --rc-color: rgb(158, 158, 158);
      }

      &:is(details) {
        & > .callout-title {
          cursor: pointer;
          padding: 1em 1.5em;
          margin: -1em -1.5em;

          & > .callout-fold-icon {
            display: flex;
            align-items: center;
            padding-inline-end: 8px;
            margin-left: auto;

            & > svg {
              transition: transform 200ms ease;
              height: 20px;
              width: 20px;
            }
          }
        }

        &[open] > .callout-title .callout-fold-icon svg {
          transform: rotate(180deg);
        }
      }
    }
  }
</style>
